<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PouL</title>
    <link>https://poul.kr/</link>
    
    <atom:link href="https://poul.kr/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>포울 블로그</description>
    <pubDate>Mon, 20 Feb 2023 06:40:55 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>20230220_restart</title>
      <link>https://poul.kr/2023/02/20/20230220-restart/</link>
      <guid>https://poul.kr/2023/02/20/20230220-restart/</guid>
      <pubDate>Mon, 20 Feb 2023 06:40:55 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="잡담"><a href="#잡담" class="headerlink" title="잡담"></a>잡담</h1><p>블로그 글 안쓴지가 오래됐는데</p><p>다시 여유가 생겼다.</p><p>학위논문을 써야하는데, 빨리 해치워버려야지</p><p>오랜만에 블로그 써보려고 하니까 방법을 다 까먹었었다.</p><p>다시 차근차근 기억을 더듬어보는중</p>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Chat/">Chat</category>
      
      
      <category domain="https://poul.kr/tags/Chat/">Chat</category>
      
      
      <comments>https://poul.kr/2023/02/20/20230220-restart/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ROS 시뮬레이터에서 IMU 센서 노이즈 모사하기 - 3DM-GX5 직접 활용</title>
      <link>https://poul.kr/2022/05/12/20220512-3dmgx5/</link>
      <guid>https://poul.kr/2022/05/12/20220512-3dmgx5/</guid>
      <pubDate>Thu, 12 May 2022 07:43:20 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="잡담"><a href="#잡담" class="headerlink" title="잡담"></a>잡담</h1><p>SLAM 구현에 있어서 Loop Closure을 시키려면 중첩되는 위치 Error가 있어야하는데</p><p>그런데 이러한 오차는 현실세계의 센서라면 흔한 일인데 시뮬레이터에서는 일부러라도 오차를 만들어내야한다.</p><p>이러한 알 수 없는 오치 만드는게 쉽지는 않다 가우시안 노이즈를 넣는 방식이 가장 일반적이다.</p><p>이걸 가장 효과적으로, 현실적으로, 쉽게 할 수 있는 방법은, 현실에서 사용하는 똑같은 센서에서 나오는 노이즈를</p><p>그대로 넣는 것이다. IMU센서를 움직이지 않게 그대로 두고, 그 값을 시뮬레이터의 값에 더해주면 노이즈가 들어간 결과가 된다.</p><h1 id="3DM-GX5"><a href="#3DM-GX5" class="headerlink" title="3DM-GX5"></a>3DM-GX5</h1><p>현재 내 수중로봇에는 3DM-GX5가 장착되어 있다. 3DM-GX2부터 </p>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Study/">Study</category>
      
      <category domain="https://poul.kr/categories/Study/ROS/">ROS</category>
      
      
      <category domain="https://poul.kr/tags/Underwater/">Underwater</category>
      
      <category domain="https://poul.kr/tags/ROS/">ROS</category>
      
      <category domain="https://poul.kr/tags/Sensor/">Sensor</category>
      
      <category domain="https://poul.kr/tags/3DM-GX5/">3DM-GX5</category>
      
      
      <comments>https://poul.kr/2022/05/12/20220512-3dmgx5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rosbag으로 image의 compressed만 record 했을 때, 이를 활용하기</title>
      <link>https://poul.kr/2022/05/06/20220506-compressed/</link>
      <guid>https://poul.kr/2022/05/06/20220506-compressed/</guid>
      <pubDate>Fri, 06 May 2022 09:07:51 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="잡담"><a href="#잡담" class="headerlink" title="잡담"></a>잡담</h1><p>ROS에서 토픽들을 record할 때 이미지들을 계속적으로 rosbag에 하게되면, 생각보다 용량이 어마어마해지곤 한다.</p><p>특히 Jetson TX2같은 단독 SBC는 용량도 턱없이 없어서, 실험데이터를 레코드하기 힘들때가 많다</p><p>그래서 어쩔 수 없이, 이미지 해상도를 버리고서라도 compressed 이미지만 rosbag record 하기도 하는데</p><p>이를 불러오면 기존의 image transport에서 읽어오는게 조금 편하지 않다</p><p>그냥 subscribe를 &#x2F;compressed를 뒤에 붙여주면 될 줄 알았더니 그렇지 않다</p><p>그냥 어떤 rosrun을 실행할 때, 다음과 같은 옵션만 붙여주면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_image_transport:=compressed</span><br></pre></td></tr></table></figure><p>이번에 TF 구하려고 붙여놓은 카메라 영상을 compressed로 녹화했는데</p><p>하.. Aruco 인식이 안될 정도의 해상도다.</p><p>다음 시험때는 Aruco 마커좀 키우고 현장에서 바로 좌표 인식해서 좌표만 rosbag 해야겠다.</p>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Study/">Study</category>
      
      <category domain="https://poul.kr/categories/Study/ROS/">ROS</category>
      
      
      <category domain="https://poul.kr/tags/Underwater/">Underwater</category>
      
      <category domain="https://poul.kr/tags/ROS/">ROS</category>
      
      
      <comments>https://poul.kr/2022/05/06/20220506-compressed/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ROS1 rviz에서 로봇의 이동경로를 표시하는 방법</title>
      <link>https://poul.kr/2022/05/02/20220502-trajectory/</link>
      <guid>https://poul.kr/2022/05/02/20220502-trajectory/</guid>
      <pubDate>Sun, 01 May 2022 15:47:43 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="잡담"><a href="#잡담" class="headerlink" title="잡담"></a>잡담</h1><p>제대로 rviz상에 어떠한 경로나 로봇이 보이는 형태가 필요하다</p><p>아직까지는 터미널에 좌르륵 값들이 내려가는 형태로 모니터링을 많이 수행하지만</p><p>rviz에 멋있게 현재 상태를 파악할 수 있으면 좋겠다.</p><h1 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h1><p>현재 나의 수중로봇에는 DVL이라는 장비가 장착되어 있다.</p><p>초음파 센서를 4방향으로 쏴서 들어오는 신호를 바탕으로 뭐 복잡하게 도플러 효과? 등을 활용해서</p><p>결과적으로 로봇의 속도를 매우 정확하게 파악할 수 있다. 이를 측정간격시간으로 적분하여</p><p>이동경로를 구하는 형태이며, 생각보다 정확하게 수중로봇의 경로를 구할 수 있다.</p><p>그래도 오차는 점점 축적되는게 당연하고, 이를 SLAM으로 보정하는게 나의 목표이다.</p><p>DVL는 시리얼로 데이터를 받는데, 이를 따로 custom msg로 만들어서 publish를 하고있다.</p><p>이를 rosbag하여 데이터를 받았는데, rviz로 표시하고 싶다면 알맞은 msg로 변환할 수 있어야 한다.</p><p>그 msg로 적합한 것이 바로 nav_msgs의 Odomerty msg이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>–작성중</p>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Study/">Study</category>
      
      <category domain="https://poul.kr/categories/Study/ROS/">ROS</category>
      
      
      <category domain="https://poul.kr/tags/Underwater/">Underwater</category>
      
      <category domain="https://poul.kr/tags/ROS/">ROS</category>
      
      
      <comments>https://poul.kr/2022/05/02/20220502-trajectory/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>연구실 이사를 한다고 블로그 글을 못올림</title>
      <link>https://poul.kr/2022/05/02/20220502_move-lab/</link>
      <guid>https://poul.kr/2022/05/02/20220502_move-lab/</guid>
      <pubDate>Sun, 01 May 2022 15:02:13 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="잡담"><a href="#잡담" class="headerlink" title="잡담"></a>잡담</h1><p>연구실 이사를 했는데</p><p>실험실 구역에서 제대로된 오피스구역으로 이동했다.</p><p>햇빛도 들고 더 좋아진 듯</p><p>서버를 켜질 못해서 포스팅이 더뎠다. 그 사이 adsense도 신청해보고</p><p>맛집블로그도 다시 차근차근 써봐야겠다. 옛날에는 잔뜩 썼었는데 요긴하게 쓰였다.</p><p>거진 한달간 글을 못썻는데 다시 많이 써야겠음.</p>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Chat/">Chat</category>
      
      
      <category domain="https://poul.kr/tags/Chat/">Chat</category>
      
      
      <comments>https://poul.kr/2022/05/02/20220502_move-lab/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ros_ceres_pcl 패키지</title>
      <link>https://poul.kr/2022/04/11/ros-ceres-pcl/</link>
      <guid>https://poul.kr/2022/04/11/ros-ceres-pcl/</guid>
      <pubDate>Mon, 11 Apr 2022 06:05:07 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="잡담"><a href="#잡담" class="headerlink" title="잡담"></a>잡담</h1><p>ROS1만 주구장창 하는게 맞나싶긴 하지만</p><p>일단 빨리빨리 할수있는걸 하는게 맞는 듯. ROS2도 빨리 플젝하나 해버려야하는데..</p><p>SLAM에서 중요한 부분이 PCL 라이브러리를 추가해서 포인트클라우드를 조금 만지작 거려야 하고</p><p>ceres solver 활용해서 loop closure를 구현해야 한다. 그러니 이 두개를 ROS에서 사용해야 한다.</p><h1 id="깃허브-올리기"><a href="#깃허브-올리기" class="headerlink" title="깃허브 올리기"></a>깃허브 올리기</h1><p>깃허브에 기존 패키지 올리기를 통해서 이번 패키지도 추가해서 한번 올려보았다.</p><p><a href="https://poul.kr/2022/04/07/20220407_github-upload">깃허브에 이전에 작성된 코드를 올리는 방법</a></p><p>이번 패키지는 아래 블로그를 참조하여 작성하였다. 매우 감사한 블로그. 다 정독할 듯</p><p><a href="https://limhyungtae.github.io/">Hyungtae Lim</a></p><p>여튼 아래와 같이 crese solver와 pcl 라이브러리 추가해서 ros에서 빨리 간단한 SLAM을 구현해봐야함..</p><p>할일이 많다.</p><p><a href="https://github.com/robotjuhwan/ros_ceres_pcl_template.git">ros_ceres_pcl_template</a></p>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Study/">Study</category>
      
      <category domain="https://poul.kr/categories/Study/SLAM/">SLAM</category>
      
      
      <category domain="https://poul.kr/tags/SLAM/">SLAM</category>
      
      <category domain="https://poul.kr/tags/ROS/">ROS</category>
      
      
      <comments>https://poul.kr/2022/04/11/ros-ceres-pcl/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>깃허브에 이전에 작성된 코드를 올리는 방법</title>
      <link>https://poul.kr/2022/04/07/20220407_github-upload/</link>
      <guid>https://poul.kr/2022/04/07/20220407_github-upload/</guid>
      <pubDate>Thu, 07 Apr 2022 07:38:51 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="잡담"><a href="#잡담" class="headerlink" title="잡담"></a>잡담</h1><p>기존에 작업한 애들을 github에 잘 정리하면서 올리는 순서에 대한 기록</p><p>사실 나는 다수와 함께 코딩을 해본적은 없어서, 크게 github에서 다양한 기능을 사용하지는 않을 듯 하다.</p><p>그냥 commit만 주구장창 하는 정도일려나</p><p>미래에 회사에 가게 된다면 필수적으로 체득하게 되지 않을까 싶다.</p><p>이제 코딩할때는 github를 계속 사용하는 습관을 들여봐야겠다.</p><p>예전에는 README 완전 대충 쓰곤 했는데, 블로그를 쓰다보니 이게 markdown이라는 것을 알게 되었고 문법도 엄청 쉽고 익숙해지는 듯</p><h1 id="방법"><a href="#방법" class="headerlink" title="방법"></a>방법</h1><ol><li>Github에서 new repository 만들기 (README .gitignore License 를 추가, .gitignore는 안해도됨, License는 시원하게 오픈해야 하니까 MIT)</li><li>Ubuntu terminal에서 새로 올리고자 하는 source 폴더로 이동</li><li>git 초기화하기<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li><li>원격저장소 github로 지정하기, 위에서 만든 github의 repo 주소를 사용<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/robotjuhwan/ros_arduino_agent_vehicle.git</span><br></pre></td></tr></table></figure></li><li>github 기본 내용을 가져오기 (새로 생성된 README .gitignore License를 가져온다고 생각하면 됨)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure></li><li>git branch인 master를 main으로 변경 (github의 기본 branch는 main인데 init에서 만들어주는 branch는 default가 master임. main으로 바뀐지는 얼마 안되었다고 함)<br>놀랍게도 whitelist&#x2F;blacklist master&#x2F;slave 라는 어떠한 인종차별적(?) 주종관계(?) 등으로 PCPC 적인 부분 떄문에 main으로 바뀌었다고 한다..<br>git version 2.18 이상부터는 기본적으로 init을 하면 main으로 생성됨.. 근데 나는 2.17버전이네. 그러면 기본 branch가 master로 생성되기 때문에 이를 지우고 main으로 바꿔줘야 한다..<br>그런데 지우는걸 먼저하는것이 아닌, main을 생성하고 이것으로 바꿔주고나서 master를 지울 수 있음. 업데이트 그냥 하는게 나을 듯<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch main</span><br><span class="line">git checkout main</span><br><span class="line">git branch -d master</span><br></pre></td></tr></table></figure></li><li>소스의 기존 파일들을 새롭게 추가. 아래 명령으로 손쉽게 추가된다. .gitignore에 따라서 자동으로 제외되지 않는 파일&#x2F;폴더가 딱딱 추가됨<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li>commit하기. 변경된 파일들에 대해서 commit 한다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;init&quot;</span></span><br></pre></td></tr></table></figure></li><li>push하기. push 해서 github에 실제로 딱 보낸다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li><li>github 저장소로 가서 올라간 소스들을 본다.<br>흐뭇~<br><img src="https://user-images.githubusercontent.com/11154693/162159063-131f104a-f7c1-4727-8cb6-8e801254a5e5.png" alt="image"></li></ol><h1 id="추가"><a href="#추가" class="headerlink" title="추가"></a>추가</h1><p>우분투 Ubuntu에서 git upgrade 하기</p><p>ubuntu에서 git을 업그레이드하려고 그냥 sudo apt install로 해보니까 2.17이 최신버전이라고 뜬다.<br>아래와 같이 써보면 현재 git version이 나온다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure><p>아래와 같이 apt에 repo를 추가하고 update하면 apt install을 통해 git 업그레이드가 가능하다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:git-core/ppa -y</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install git -y</span><br></pre></td></tr></table></figure><p>이후 버전을 확인해보니 아래와 같이 2.35.1 버전으로 확인되었다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version 2.35.1</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Study/">Study</category>
      
      <category domain="https://poul.kr/categories/Study/Github/">Github</category>
      
      
      <category domain="https://poul.kr/tags/Github/">Github</category>
      
      
      <comments>https://poul.kr/2022/04/07/20220407_github-upload/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>github 관리를 한번 해봐야겠다</title>
      <link>https://poul.kr/2022/04/07/00-ros-mbed-arduino-github/</link>
      <guid>https://poul.kr/2022/04/07/00-ros-mbed-arduino-github/</guid>
      <pubDate>Thu, 07 Apr 2022 05:47:13 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="잡담"><a href="#잡담" class="headerlink" title="잡담"></a>잡담</h1><p>Github 관리를 해봐야겠다. 하드디스크 털어서 Mbed나 PCB디자인이나 ROS나 OPEN CV나 등등 모든 템플릿들을 정리해서 올려둬야 겠다.</p><p>그러면 내가 또 들고와서 잘 쓸 수 있게끔.</p><p>근데 대부분이 다 나도 퍼오고 조금씩 수정해서 쓰는 것들인데, 그럼 다른 github들이랑은 어떻게 연결해야할지..</p><p>감이 잘 안잡히지만 그래도 어떻게든 해봐야지</p><p>잘 꾸며봐야겠다.</p><p>근데 이 블로그도 github 에 commit 기록에 들어가는 것 같은데, 블로그 자주 쓴다고 github가 초록밭이 되면 조금</p><p>허위 가짜 github가 되는 느낌이다.</p><p>블로그 deploy는 조금 자제해야겠다. 글 완성하고 올리는 형태를 지향</p>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Study/">Study</category>
      
      <category domain="https://poul.kr/categories/Study/Github/">Github</category>
      
      
      <category domain="https://poul.kr/tags/Github/">Github</category>
      
      <category domain="https://poul.kr/tags/Mbed/">Mbed</category>
      
      <category domain="https://poul.kr/tags/ROS/">ROS</category>
      
      
      <comments>https://poul.kr/2022/04/07/00-ros-mbed-arduino-github/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>01_laser scan SLAM</title>
      <link>https://poul.kr/2022/04/07/20220407_01-laser-scan-slam/</link>
      <guid>https://poul.kr/2022/04/07/20220407_01-laser-scan-slam/</guid>
      <pubDate>Thu, 07 Apr 2022 05:07:30 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="잡담"><a href="#잡담" class="headerlink" title="잡담"></a>잡담</h1><p>내가 가진 상황에 맞게 수중로봇에서 Pose Graph SLAM를 빠르게 구현해서 실험까지 해내야 한다. 시뮬레이터도 있고 수조실험 일정도 잡혔다.</p><p>그 전에 해야할 일의 목록을 정리해보면</p><ul><li>시뮬레이션에서 목표한 움직임대로 수행하여 rosbag 제작</li><li>rosbag에 대하여 pose graph slam을 활용한 자체 알고리즘 제작&#x2F;테스트</li><li>작은 수조에서 bricks들에 대한 dataset 제작, YOLOv4 학습, Laser Scan test</li><li>수조 실험 수행 (4월 18일 주)</li><li>논문 초안 작성 (4월 중)</li><li>논문 투고 (5월 초)</li></ul><p>지금까지 되어있는 부분 목록</p><ul><li>논문 제목 Underwater Recursive Rotational SLAM 이라고 URR-SLAM으로 이름 지음. 시작이 반이다.</li><li>로봇 시뮬레이터. 매번 고맙게 활용하는 UUV Sim.. 내 로봇을 기반으로 이식해두어서 언제든지 간이 실험을 수행해볼 수 있음</li><li>시뮬레이터 맵 생성. 아래와 같은 전략이다. 벽돌 모형도 실제 크기와 같이 구현해두고, 4가지 부분을 사각형으로 이동해서 Loop Closure를 보여줄 듯<br><img src="https://user-images.githubusercontent.com/11154693/162125870-db29424d-f838-459e-b389-3abfe465e297.png" alt="image"></li><li>Bricks들 YOLOv4 학습. 4가지 종류의 Bricks를 4가지 구분해서 125장 정도씩 data set 구성하고 일반 YOLOv4에 학습했다. 실제 로봇에서는 Tiny 모델로 써야함.</li><li>Laser Scan Sensor를 Gazebo에서 구현된 값 그대로 활용하지 않고, 로봇 앞부분의 Camera로 Image 읽고 다시 3차원 laser scan으로 계산하도록 Vision 처리하는 코드 작성. 실제 로봇에서 해당 node Package를 사용해야 하기 떄문에 구조상 미리 작성</li></ul><p>뭔가 많이 한 것 같지만 개뿔 pose graph slam 구현하는 부분이 제일 중요하고 어렵다. 다른건 그냥 시간만 있으면 되는데 이 부분은 머리싸매고 차근차근 빠르게 해내야 한다.</p><p>우선 SLAM의 Backend 부분은 어찌저찌 ceres solver 활용하면 가능할 것 같아서 감이 슬쩍 잡히는데</p><p>Frontend 부분은 map 구성도 그렇고, Line Laser Matching도 그렇고 해야할 부분이 많다.</p><p>할게 많을때는 할 수 있는 것부터 하라고 했다. 그래서 rosbag부터 만들고, 그걸로 반복반복 할 수 있도록 해야겠다.</p><h1 id="고찰"><a href="#고찰" class="headerlink" title="고찰"></a>고찰</h1><p>아쉽게도.. 이번달에 완성해서 투고까지가 목표이므로, 투고 이후에 Laser Scan SLAM 부분을 다시 작성해야 겠다.</p>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Study/">Study</category>
      
      <category domain="https://poul.kr/categories/Study/SLAM/">SLAM</category>
      
      
      <category domain="https://poul.kr/tags/SLAM/">SLAM</category>
      
      <category domain="https://poul.kr/tags/Underwater/">Underwater</category>
      
      
      <comments>https://poul.kr/2022/04/07/20220407_01-laser-scan-slam/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>00_laser scan SLAM</title>
      <link>https://poul.kr/2022/04/06/00-laser-scan-slam/</link>
      <guid>https://poul.kr/2022/04/06/00-laser-scan-slam/</guid>
      <pubDate>Wed, 06 Apr 2022 08:31:20 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="잡담"><a href="#잡담" class="headerlink" title="잡담"></a>잡담</h1><p>수중에서는 3차원 측정을 위한 센서가 매우 부족하다.</p><p>스테레오 비전을 쓰기도 하지만, 워낙 피쳐가 부족한 환경이라서 잘 되는지는 의문</p><p>Lidar 같은 장비나 리얼센스 같은 장비가 수중용이 없다.. 돈이 안되서 그런가</p><p>보통 이러한 장비들은 육상용의 경우 사람 눈에 영향을 줄 수 있어서 매우 제한적인 파워로 극도의 성능을 뽑아낸다.</p><p>수중에는 사람도 없으니까 파워 왕창 높히면 장비 사용할 수 있을텐데.. 아쉽</p><p>수중생물에 영향을 줄 수 있어 환경단체의 반대를 받을 수 있다. 조심</p><h1 id="Line-Laser-scan"><a href="#Line-Laser-scan" class="headerlink" title="Line Laser scan"></a>Line Laser scan</h1><p>수중에서는 고전적일 수 있는 찐 레이저를 쓴다. 왜 찐 레이저라고 했냐면, 눈에 보이는 레이저이기 때문.</p><p>보통 육상에서 쓰는 대부분의 레이저 장비들은 가시광선이 아니라서 눈에 보이지 않는다.</p><p>하지만 수중에서는 그런거 없고 파워풀하게 녹색이나 파란색 레이저를 쓴다.</p><p>빨간 레이저는 쓰지 않는다. 빨간색은 수중에서 감쇄가 심하기 때문이다.</p><p>그리고 수중 카메라로 색상 인식을 해서 그 laser 부분의 3차원 위치정보를 얻는다.</p><p>매우 고전적이지만 확실한 방법이다.</p><p>(수중에서 Structured Light를 이용해서 한번에 depth를 얻는 장비도 구현되어 있더라. 없으니까 패스)</p><p>나는 이러한 laser scan 방법론을 활용하여 수중에서 간단하게 SLAM을 구현해보고자 한다.</p><h1 id="고찰"><a href="#고찰" class="headerlink" title="고찰"></a>고찰</h1><p>SLAM은 흔히 camera 기반 슬램이 있고 라이다나 뎁스 센서로 이루어지는 SLAM이 있고, 방식 등으로는 여러가지가 있지만 Graph based SLAM 방식을 많이들 쓴다</p><p>Pose Graph SLAM 이라고도 하던데, 간단하게 말하면 시간에 따라서 Robot의 Pose들을 시리얼하게 딱딱 이어 묶고는 그 사이의 Transformation을 각각 계산해둔다.</p><p>그러면 일자로 이어진 그래프?가 될 것인데, Loop Closure가 발생하면 이를 보정하기 위해서 각각의 Pose들을 최적화시키게 된다. 이때 Pose는 Position과 Attitude를 포함한 Robot의 정보다.</p><p>쉽게말해서 원형으로 로봇이 움직인다고 했을 때 출발한 지점으로 Robot이 돌아오게 되면, 출발지의 Pose와 지금껏 Robot이 추정하여 현재 있을 것이라고 예측했던 위치가 알맞지 않을 것이다 (오차가 계속해서 누적되었기 때문).</p><p>이를 바로잡아 주는 과정이 Loop Closure이다.</p><p>SLAM 영상들을 보면 지도가 만들어지다가 갑자기 뚝뚝 일부의 지도들이 갑작스럽게 어디론가 딱 붙는다던지 하는 모습을 보여주는데, 그게 Loop Closure이다.</p><p>Loop Closure과정을 보면 일부의 생선된 지도들이 딱딱 알맞게 붙어들어가게 되는데, 이는 생각보다 간단한 과정으로 해결가능하다 (물론 그 과정 자체의 계산은 매우 복잡하지만).</p><p>Solver를 사용하면 이를 풀어낼 수 있다. Solver가 무었이냐 하면 쉽게말하면 연립방정식을 풀어주는 것이다.</p><p>(학부시절에 쓰던 CASIO 공학계산기에도 Solver기능이 있어서 매우 편하게 문제를 풀 수 있었다. 그때 생각해보면 해의 범위를 설정해줘야 해서 이게 왜 필요한가 생각했었는데, Solver의 의미를 알고나니 이해가 된다.)</p><p>여튼 Solver가 Loop Closure에서 작동하는 원리는 간단하다. 우선 Robot의 Pose들이 이어져 있을때, 그 Pose 사이에는 Transform Matrix가 존재한다. 3차원 이동과 회전이 동시에 이루어지는 그 행렬이다. 이를 Edge라고 표현하더라</p><p>여튼 Loop Closure가 시작된 Pose에서 현재의 Pose사이에는 여러차례 알맞은 Edge가 곱해져서 표현이 된다. Edge로써 현재의 Pose가 추정된 것이다.</p><p>이 모든 Edge에 어떠한 미지수를 각각 곱했을 때 현재의 Pose가 시작된 Pose에 가장 가까워질 수 있도록 (거의 일치하도록) 하고 Solver를 활용하여 그 미지수를 구하는 것이다.</p><p>그 미지수를 구하게되면, 실제 그 미지수를 각 Edge에 곱해서 Pose들을 다시 Update하면 지도가 찰싹 붙는 것을 보여줄 수 있는 것이다.</p><p>그래서 이러한 Loop Closure 과정은 일반적으로 컴퓨팅 양이 많기때문에 SLAM 알고리즘에서 Backend 과정으로 분류한다. 가끔 일어나지만 시간을 오래걸리니 조금 뒷단에서 처리하겠다는 느낌</p><p>자연스럽게 Frontend는 실시간으로 현재의 Pose를 추정하여 Node를 구성하는 것이다 (말은 안했지만 Node가 Graph에서 현재의 Pose들을 나타내는 용어임 Graph는 Node와 Edge로 구성되어 있다.)</p><p>자 위 과정을 이해했다면 Pose Graph SLAM을 이해한 것이다. 물론.. 나도 잘 이해한 건지는 모르겠다.</p>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Study/">Study</category>
      
      <category domain="https://poul.kr/categories/Study/SLAM/">SLAM</category>
      
      
      <category domain="https://poul.kr/tags/SLAM/">SLAM</category>
      
      <category domain="https://poul.kr/tags/Underwater/">Underwater</category>
      
      
      <comments>https://poul.kr/2022/04/06/00-laser-scan-slam/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>블로그를 시작하는 첫 글</title>
      <link>https://poul.kr/2022/04/06/first-post/</link>
      <guid>https://poul.kr/2022/04/06/first-post/</guid>
      <pubDate>Wed, 06 Apr 2022 06:27:45 GMT</pubDate>
      
      <description>&lt;p&gt;      &lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>      </p><span id="more"></span><h1 id="첫-글"><a href="#첫-글" class="headerlink" title="첫 글"></a>첫 글</h1><p>블로그를 시작합니다.</p><p>아직은 어떻게 하는지 잘 모르겠지만</p><p>과거에 워드프레스로 직접 서버를 구동하는 형식보다</p><p>깃허브로 블로그를 운영하면</p><p>기술 블로그로 활용이 가능할 것 같다는 생각을 했습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">코딩도 잘 표현할 수 있고 좋은 듯</span><br></pre></td></tr></table></figure><p>MarkDown 문법도 숙지해야 겠다.</p><p><strong>이 문법은 md 파일의 문법, 여튼 여기 게시판을 쓰기위한 문법이다</strong></p><p>음식이랑 여행도 많이많이 기록해야지</p><h1 id="중요"><a href="#중요" class="headerlink" title="중요"></a>중요</h1><p>이곳에 기술된 내용은 대부분 맞겠지만 틀린 내용을 당연히 서술할 가능성이 높습니다.</p><p>이 곳의 내용은 절대 Reference로 활용될 수 없을 것입니다.. </p><p>틀린 내용이나 지식이 있다면 단연코 댓글로 알려주시면 수정하도록 하겠습니다.</p>]]></content:encoded>
      
      
      <category domain="https://poul.kr/categories/Chat/">Chat</category>
      
      
      <category domain="https://poul.kr/tags/Chat/">Chat</category>
      
      
      <comments>https://poul.kr/2022/04/06/first-post/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
